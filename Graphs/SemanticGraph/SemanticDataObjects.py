'''
Туу будет надстройка для "семантического" графа.
Подробнее она описана ниже.

'''


'''
Надо будет переделать от "семантического" графа к "графу с абстрактными сранимыми токенами".
    Чтобы тут был менеджер - строитель.
'''


''' готово, отлажено
# --------------------------------------------------------------------------------------------------------
# Объект GraphElementData --------------------------------------------------------------------------------
# --------------------------------------------------------------------------------------------------------
Объект для хранения данных элемента направленного графа.

Параметры init:
    element_id - индекс элемента графа
    identification_key - идентификационный ключ графа.

Доступные методы
    основные @property (БЕЗ setter-а!)
        element_id - индекс объекта
        tokens_list - получить список токенов элемента
        tokens_amount - количество токенов

        nearest_parents - список ближайших родителей
        nearest_children - список ближайших детей
        doubles - список дублей текущего элемента. Если элемент - дублёр, то тут будет id оригинала.
        duplicate - является ли элемент дублёром

    @property
        need_to_process - требуется ли обработать (включить в граф) граф?

    # Работа с токенами
        set_tokens(tokens: list or str, replace: bool = False) -> bool - функция устанавливает список токенов в self.
                Корректирует длину списка (__tokens_amount). Если список уже есть, вернёт False и опционально
                переустановит список в зависимости от атрибута replace.


    # Получение/передача информации о связях
        set_me_as_double(original_id: int) - функция устанавливает текущий элемент дублёром для original_id
                внутри собственного набора данных.

        add_to(element_id: int, relation: str) - функция добавляет связь с element_id типа relation.

        del_from(element_id: int, relation: str) -> bool - функция удаляет элемент element_id со связи relation,
                при этом, если связи не было, вернётся False, если связь была, и она удалена, вернётся True.

        replace(old_value: int, new_value: int, relation: str) -> bool - функция заменит old_value на new_value
                в списке relation. Если замена была успешна (значение old_value было), функция вернёт True,
                если заменять было нечего, то вернётся статус False.

    # Проверка/детектирование
        is_parent(el_id: int) -> bool - проверка, является ли el_id родителем

        is_child(el_id: int) -> bool - проверка, является ли el_id ребёнком

        is_duplicate(el_id: int) -> bool - проверка, является ли el_id элементом


self параметры
    mutex - мьютекс элемента, использующийся для разрешения/запрета операций с ним
    identification_key - идентификационный ключ.

    __element_id: int - индекс фразы
    __my_tokens: list - список токенов
    __tokens_amount: int - количество токенов

    __need_to_process: bool - требуется ли включение в граф

    __nearest_parents: str - строка с id родителей вида " id1 id2 id3 "
    __nearest_children: str - строка с id детей
    __doubles - строка с id дублей, если фраза не дублёр. Если фраза дублёр, это строка " original_id "
    __duplicate: bool - является ли текущий элемент дублёром


# --------------------------------------------------------------------------------------------------------
# Объект GraphElement ------------------------------------------------------------------------------------
# --------------------------------------------------------------------------------------------------------
Оболочка вокруг GraphElement, которая должна реализовать работу с базой и некоторые дополнительные функции.

Параметры init:
    element_id - индекс элемента графа
    identification_key - идентификационный ключ графа.

# Доступные методы
    основные @property (БЕЗ setter-а!)
        element_id - индекс объекта
        tokens_list - получить список токенов элемента
        tokens_amount - количество токенов

        nearest_parents - список ближайших родителей
        nearest_children - список ближайших детей
        doubles - список дублей текущего элемента. Если элемент - дублёр, то тут будет id оригинала.
        duplicate - является ли элемент дублёром

    @property
        need_to_process - требуется ли обработать (включить в граф) граф?
        narrowed - детектор сужения элемента внутри графа

    # Работа с токенами
        set_tokens(tokens: list or str, replace: bool = False) -> bool - функция устанавливает список токенов в self.
                Корректирует длину списка (__tokens_amount). Если список уже есть, вернёт False и опционально
                переустановит список в зависимости от атрибута replace.

    # Получение/передача информации о связях
        set_me_as_double(original_id: int) - функция устанавливает текущий элемент дублёром для original_id
                внутри собственного набора данных.

        add_to(element_id: int, relation: str) - функция добавляет связь с element_id типа relation.

        del_from(element_id: int, relation: str) -> bool - функция удаляет элемент element_id со связи relation,
                при этом, если связи не было, вернётся False, если связь была, и она удалена, вернётся True.
        replace(old_value: int, new_value: int, relation: str) -> bool - функция заменит old_value на new_value
                в списке relation. Если замена была успешна (значение old_value было), функция вернёт True,
                если заменять было нечего, то вернётся статус False.

    # Проверка/детектирование
        is_parent(el_id: int) -> bool - проверка, является ли el_id родителем
        is_child(el_id: int) -> bool - проверка, является ли el_id ребёнком
        is_duplicate(el_id: int) -> bool - проверка, является ли el_id элементом

    # Функция сужения
        narrow_down(ids_list_or_set: list or set, keep: bool = True) Функция дропает из связей объекта ссылки
                на индексы, согласно переданному списку и настроёке keep.
                :param ids_list_or_set: список с индексам, которые участвуют в обработке
                :param keep: оставить индексы из списка? True - останутся только индексы из списка;
                        False - останутся только индексы, не нахоядищеся в списке.
                :return: ничего

    # Работа с параметрами
        set_parameter(value, name, replace: bool = True) -> bool - функция устанавливает параметру name заначение
                value и возвращает - был ли встречен объект в наборе.
        get_parameter(name) -> object or None - функция отдаёт параметр name или None, если его нет в словаре.
        get_parameters_keys() -> list - функция передаёт набор параметров.
        del_parameter(name) -> bool - функция пробует удалить параметр Name из словаря параметров и вернуть True.
                Если такого ключа нет в словаре, вернётся False.

self параметры
    mutex - мьютекс элемента, использующийся для разрешения/запрета операций с ним
    identification_key - идентификационный ключ.
    _GraphElementData__element_id: int - индекс фразы
    _GraphElementData__my_tokens: list - список токенов
    _GraphElementData__tokens_amount: int - количество токенов

    _GraphElementData__need_to_process: bool - требуется ли включение в граф

    _GraphElementData__nearest_parents: str - строка с id родителей вида " id1 id2 id3 "
    _GraphElementData__nearest_children: str - строка с id детей
    _GraphElementData__doubles - строка с id дублей, если фраза не дублёр. Если фраза дублёр, это строка " original_id "
    _GraphElementData__duplicate: bool - является ли текущий элемент дублёром

    __narrowed: bool - было ли сужение элемента в рамках набора - графа (сброшены индексы, которых нет в наборе)
    __parameters_dict: dict - словарь доп параметров. "На будущее", чтобы работать со статистикой без подгрузки
            набора запросов.

'''